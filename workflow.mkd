# Log into uppmax
ssh [username]@rackham.uppmax.uu.se

# Pull the data

## Create softlinks of bam files to personal working directory
```bash
# Move to working/parent directory
cd /proj/sparrowhybridization/Pitaliae/working/Arianna

mkdir Data # make a new directory within the parent directory
cd Data # move into Data

# Create a softink to the bamfiles within the Data directory
ln -s /proj/sparrowhybridization/Pitaliae/data/WGS/bamfiles/ Bamfiles
```

## Download the new house sparrow reference genome from NCBI (accession: GCA_036417665.1)
```bash
# In the Data directory
mkdir ReferenceGenome
cd ReferenceGenome

# Command line download unsuccessful, download to local computer then move to uppmax server: https://www.ncbi.nlm.nih.gov/datasets/genome/GCA_036417665.1/
scp ncbi_dataset.zip arianna2@rackham.uppmax.uu.se:/proj/sparrowhybridization/Pitaliae/working/Arianna/Data/ReferenceGenome

# Investigate headers
cat GCA_036417665.1_bPasDom1.hap1_genomic.fna | grep \>
```

# Get basic alignment stats for existing BAM files using SAMtools flagstat (v1.12)
```bash
# Move back to personal working directory
cd ../../

# Create a new directory
mkdir 01_FlagstatExistingBAM
cd 01_FlagstatExistingBAM

# Start an interactive environment
interactive -A naiss2023-5-262 -n 16 -t 1:00:00 # should take ~45 minutes

module load bioinfo-tools
module load samtools/1.14

# Run samtools on each bam file
for dir in ../Data/Bamfiles/*/; do # ${dir} contains entire path

    dirName=$(basename "$dir") # just the name of the specific directory is stored (e.g corsica)

    outputDir="${dirName}_flagstats" # store a directory name (e.g. corsica_flagstats)

    mkdir "$outputDir" # make a directory of this name in the current directory, 01_FlagstatsExistingBAM

    for bam in ${dir}/*.bam; do # for each file in the directory that ends in .bam

        file=$(basename "$bam" .bam); # pull the basename, e.g. "K032_resorted_nodup_realigned"

        if [[ "$file" == Rimini* || "$file" == Lesina* ]]; # Rimini and Lesina populations follow a different format
        then
            prefix=${file} # pull the basename, e.g. "Rimini_112"
        else
            prefix=$(basename "$bam" .bam | cut -d "_" -f 1) # for all other populations, pull the basename "K032_resorted_nodup_realigned" then just "K032"
        fi

        samtools flagstat "${bam}" -@ 16 > "${outputDir}/${prefix}.flagstat" # run w/16 threads on each .bam file, save (e.g. "K032.flagstat") to corresponding directory

    done
done
```

Outputs: 1 output per .bam file for each population. Outputs are named [id].flagstat and housed within a subdirectory of 01_FlagstatExistingBAM named [population]_flagstats

# Re-map BAM files to new House Sparrow Reference Genome using SAMtools (v1.12)

## Create a directory for remapping task
```bash
# Move to working/parent directory
cd /proj/sparrowhybridization/Pitaliae/working/Arianna

mkdir 02_Remap # create a new subdirectory
```

## Index the new reference genome with BWA (v0.7.17)
```bash
# When attempting to run Heng Li's code on remapping an aligned BAM, received this error: [E::bwa_idx_load_from_disk] fail to locate the index files
# To resolve, index the new reference genome

interactive -A naiss2023-5-262 -n 12 -t 0:45:00 # request an interactive environment

module load bioinfo-tools
module load samtools/1.12 # latest version at the time of Heng Li's post
module load bwa/0.7.17 #latest version at the time of Heng Li's post

# Move to directory that houses the new reference genome
cd Data/ReferenceGenome

# Prior to remapping, run bwa index
bwa index GCA_036417665.1_bPasDom1.hap1_genomic.fna # should take ~ 45 minutes
```

Ouputs: 5 files with a basename of GCA_036417665.1_bPasDom1.hap1_genomic.fna (the file name of the reference genome)

(1) [basename].amb (2) [basename].ann (3)[basename].bwt (4) [basename].pac (5) [basename].sa

## Create a folder to house project scripts & create scripts
```bash
cd /proj/sparrowhybridization/Pitaliae/working/Arianna

mkdir Scripts
cd Scripts

mkdir 02_Remap_scripts
cd 02_Remap_scripts # scripts for this task should be located here!
```

There should be 12 scripts in this folder! Each script will remap the bam files for a population (population specified in script name). Originally wrote one script to remap all the bam files for every population,but it would take many days to run this script on one node. Therefore, we will run 1 job per population instead of 1 job for all the bam files!

### Example code for remapping just one BAM file
```bash
interactive -A naiss2023-5-262 -n 20 -t 2:00:00

module load bioinfo-tools
module load samtools/1.12 # latest version at the time of Heng Li's post
module load bwa/0.7.17 # latest version at the time of Heng Li's post

# Code pulled from Heng Li's blogpost, see link for command-by-command description
# https://lh3.github.io/2021/07/06/remapping-an-aligned-bam
# 20 cores per node, 1 thread per core! Specify 20 threads for each task
samtools collate -Oun128 ../Data/Bamfiles/corsica/K006_resorted_nodup_realigned.bam -@ 20 | samtools fastq -OT RG,BC -@ 20 - \
| bwa mem -pt8 -CH <(samtools view -H ../Data/Bamfiles/corsica/K006_resorted_nodup_realigned.bam|grep ^@RG) ../Data/ReferenceGenome/GCA_036417665.1_bPasDom1.hap1_genomic.fna -t 20 - \
| samtools sort -@ 20 -m4g -o K006_remapped.bam -
```

## Create jobs for each remapping script
```bash
# Corsica, batch job 46179245
sbatch -A naiss2023-5-262 -p node -t 17:30:00 -D /proj/sparrowhybridization/Pitaliae/working/Arianna/02_Remap -e ../Job_logs/02_Remap_logs/remapping_corsica.err -J remap_existingBAM_corsica --mail-user=ar4666al-s@student.lu.se --mail-type=ALL remap_corsica.sh

# Crete, batch job 46179242
sbatch -A naiss2023-5-262 -p node -t 7:30:00 -D /proj/sparrowhybridization/Pitaliae/working/Arianna/02_Remap -e ../Job_logs/02_Remap_logs/remapping_crete.err -J remap_existingBAM_crete --mail-user=ar4666al-s@student.lu.se --mail-type=ALL remap_crete.sh

# Crotone, batch job 46179247
sbatch -A naiss2023-5-262 -p node -t 10:30:00 -D /proj/sparrowhybridization/Pitaliae/working/Arianna/02_Remap -e ../Job_logs/02_Remap_logs/remapping_crotone.err -J remap_existingBAM_crotone --mail-user=ar4666al-s@student.lu.se --mail-type=ALL remap_crotone.sh

# Guglionesi, batch job 46179248
sbatch -A naiss2023-5-262 -p node -t 12:00:00 -D /proj/sparrowhybridization/Pitaliae/working/Arianna/02_Remap -e ../Job_logs/02_Remap_logs/remapping_guglionesi.err -J remap_existingBAM_guglionesi --mail-user=ar4666al-s@student.lu.se --mail-type=ALL remap_guglionesi.sh

# House, batch job 46220281
sbatch -A naiss2023-5-262 -p node -t 15:30:00 -D /proj/sparrowhybridization/Pitaliae/working/Arianna/02_Remap -e ../Job_logs/02_Remap_logs/remapping_house.err -J remap_existingBAM_house --mail-user=ar4666al-s@student.lu.se --mail-type=ALL remap_house.sh

# Malta, batch job 46179250
sbatch -A naiss2023-5-262 -p node -t 13:30:00 -D /proj/sparrowhybridization/Pitaliae/working/Arianna/02_Remap -e ../Job_logs/02_Remap_logs/remapping_malta.err -J remap_existingBAM_malta --mail-user=ar4666al-s@student.lu.se --mail-type=ALL remap_malta.sh

# Miscellaneous, batch job 46220282
sbatch -A naiss2023-5-262 -p node -t 13:30:00 -D /proj/sparrowhybridization/Pitaliae/working/Arianna/02_Remap -e ../Job_logs/02_Remap_logs/remapping_miscellaneous.err -J remap_existingBAM_miscellaneous --mail-user=ar4666al-s@student.lu.se --mail-type=ALL remap_miscellaneous.sh

# P_montanus, batch job 46220283
sbatch -A naiss2023-5-262 -p node -t 13:30:00 -D /proj/sparrowhybridization/Pitaliae/working/Arianna/02_Remap -e ../Job_logs/02_Remap_logs/remapping_p_montanus.err -J remap_existingBAM_p_montanus --mail-user=ar4666al-s@student.lu.se --mail-type=ALL remap_p_montanus.sh

# Rimini, batch job 46179255
sbatch -A naiss2023-5-262 -p node -t 9:30:00 -D /proj/sparrowhybridization/Pitaliae/working/Arianna/02_Remap -e ../Job_logs/02_Remap_logs/remapping_rimini.err -J remap_existingBAM_rimini --mail-user=ar4666al-s@student.lu.se --mail-type=ALL remap_rimini.sh

# Sardinia, batch job 46179256
sbatch -A naiss2023-5-262 -p node -t 10:30:00 -D /proj/sparrowhybridization/Pitaliae/working/Arianna/02_Remap -e ../Job_logs/02_Remap_logs/remapping_sardinia.err -J remap_existingBAM_sardinia --mail-user=ar4666al-s@student.lu.se --mail-type=ALL remap_sardinia.sh

# Sicily, batch job 46179347
sbatch -A naiss2023-5-262 -p node -t 9:30:00 -D /proj/sparrowhybridization/Pitaliae/working/Arianna/02_Remap -e ../Job_logs/02_Remap_logs/remapping_sicily.err -J remap_existingBAM_sicily --mail-user=ar4666al-s@student.lu.se --mail-type=ALL remap_sicily.sh

# Spanish, batch job 46179498
sbatch -A naiss2023-5-262 -p node -t 14:30:00 -D /proj/sparrowhybridization/Pitaliae/working/Arianna/02_Remap -e ../Job_logs/02_Remap_logs/remapping_spanish.err -J remap_existingBAM_spanish --mail-user=ar4666al-s@student.lu.se --mail-type=ALL remap_spanish.sh
```

## Index the new BAM files using SAMtools (v1.12)
```bash
# Create a script (index_remapped.sh) to index the bam files and save it to Arianna/Scripts/02_Remap_scripts

# Move into the Arianna/Scripts/02_Remap_scripts directory
cd /proj/sparrowhybridization/Pitaliae/working/Arianna/Scripts/02_Remap_scripts

# Indexing, batch job 46239392
sbatch -A naiss2023-5-262 -p core -n 16 -t 1:00:00 -D /proj/sparrowhybridization/Pitaliae/working/Arianna -e Job_logs/02_Remap_logs/indexing.err -J indexing_remapped_BAM --mail-user=ar4666al-s@student.lu.se --mail-type=ALL index_remapped.sh
```
Outputs: 1 output per bam file. Outputs are named [id]_remapped.bam.bai and housed in the same directory as the corresponding bam files

# Run SAMtools (v1.14) flagstat on the new BAM files
```bash
# Create a new directory to store flagstat output of task
cd ../.. # back to Arianna working directory
mkdir 03_FlagstatRemappedBAM

# Move to Scripts directory
cd Scripts

# Create a scripts directtory for the task, create flagstat_remapped.sh script and store it here
mkdir 03_FlagstatRemappedBAM_scripts
cd 03_FlagstatRemappedBAM_scripts

# Flagstats on remapped bam files, batch job 46240169
sbatch -A naiss2023-5-262 -p core -n 16 -t 1:30:00 -D /proj/sparrowhybridization/Pitaliae/working/Arianna/03_FlagstatRemappedBAM -e ../Job_logs/03_FlagstatRemappedBAM_logs/flagstat.err -J flagstat_remapped_BAM --mail-user=ar4666al-s@student.lu.se --mail-type=ALL flagstat_remapped.sh
```
Outputs: 1 output per .bam file for each population. Outputs are named [id]_remapped.flagstat and housed within a subdirectory of 03_FlagstatRemappedBAM named [population]_remap_flagstats

# Merge samtools flagstat output for each existing and remapped bam
``` bash
# Create a new directory to store merged flagstat files
cd ../.. # back to Arianna working directory
mkdir 04_FlagstatCombined
cd 04_FlagstatCombined

# Combine the flagstat files
for dir_existing in ../01_FlagstatExistingBAM/*/; do # ${dir_existing} contains entire path

    dir_existingName=$(basename "$dir_existing") # just the name of the specific directory is stored (e.g corsica_flagstats)

    outputDir="${dir_existingName}_combined" # store a directory name (e.g. corsica_flagstats_combined)

    mkdir "$outputDir" # make a directory of this name in the current directory, 04_FlagstatCombined

    for dir_remapped in ../03_FlagstatRemappedBAM/*/; do

        for flagstat_existing in ${dir_existing}/*.flagstat; do # for the existing bam flagstat files

            prefix_existing=$(basename "$flagstat_existing" .flagstat) # pull just K032 instead of K032.flagstat
            
            for flagstat_remapped in ${dir_remapped}/*.flagstat; do # for the remapped bam flagstat files

                prefix_remapped=$(basename "$flagstat_remapped" "_remapped.flagstat") # pull just Rimini_91 from Rimini_91_remapped.flagstat


                if [[ "$prefix_existing" == "$prefix_remapped" ]]; # if the prefixes for existing and remapped match (e.g. Rimini_91 == Rimini_91)
                then
                    echo -e ">\n>${prefix_existing}.bam flagstat output (existing bam file)" > tempHeader_exisiting # create a temporary header for the existing flagstat output, overwrite for each iteration

                    echo -e ">\n>${prefix_remapped}_remapped.bam flagstat output (remapped bam file)" > tempHeader_remapped # create a temporary header for the remapped flagstat output, overwrite for each iteration

                    cat tempHeader_exisiting ${flagstat_existing} tempHeader_remapped ${flagstat_remapped} > "${outputDir}/${prefix_existing}_combo.flagstat" # vertically concatenate the existing header + existing flagstat output + remapped header + remapped flagstat output
                else
                    continue # if the prefixes don't match, don't do anything
                fi

            done

        done
        
    done
done
```
Outputs: 1 output per sample file for each population. Outputs are named [id]_combo.flagstat and housed within a subdirectory of 04_FlagstatCombined named [population]_flagstats_combined 